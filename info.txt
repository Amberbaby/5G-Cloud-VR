<%@ page language="java" contentType="text/json; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ page import="org.apache.commons.lang3.StringEscapeUtils" %>
<%@ page import="org.apache.commons.lang3.StringUtils" %>
<%@ page import="com.huawei.mateinfo.jsonf.JSONObject" %>
<%@ page import="com.huawei.mateinfo.log.Logger" %>
<%@ page import="com.huawei.mateinfo.cas.utils.PasswordUtil" %>
<%@ page import="com.huawei.most.platform.secure.facade.SecureFacade" %>

<% 
response.setContentType("text/json");
response.setHeader("Pragma", "No-cache");
response.setDateHeader("Expires", 0);
response.setHeader("Cache-Control", "no-cache");
Logger LOGGER = Logger.getLogger(getClass());
String imeienc = StringEscapeUtils.escapeHtml4(request.getParameter("imei"));
String dataenc = StringEscapeUtils.escapeHtml4(request.getParameter("data"));
String clientSecret = StringEscapeUtils.escapeHtml4(request.getParameter("clientSecret"));
String signature = request.getParameter("signature");
String w3AccountMsg = request.getParameter("w3AccountMsg");
if(imeienc!=null)
{
    
    
    String publicKey = "30820122300d06092a864886f70d01010105000382010f003082010a0282010100c3ce97ad13989df961b701740153a7c36b8b362c7b44a640893000af7a50ace238856ae6856f570182648a9f86e7cbd00848ebdc83095bbf02dafe1315bc9f71f4c1f9b9f131f03dbc607383c058989fe31334e48a7fd0fb53037c1db697422c2b99559af6c68b9ef8a72b13c9167ca0a5b83b41b0d00824cbd58d3a93dbd30a1a1ba5899d29b3976cecec9bfda013f8dae3b00ffc87be3413c4565982b21f7ad648b71128690349cb2222a319dfe798bf3441536576a94003a1344b16afb5e800cf471b7e3a942e7197c240dd2801acc89a3908c533044936f07bcab94e8a3498b90c9c5d02e6dad934b5cc6769328d130cd671c9bbd0a4d2bf57abe1cfa8910203010001";
    byte[] publicKeyy  = SecureFacade.decodeHex(publicKey.toCharArray());
    
    try
    {   
        byte[]  randomNumberBytes = imeienc.getBytes("UTF-8");
        randomNumberBytes = SecureFacade.encryptByRsaPubKey(publicKeyy, randomNumberBytes);     
        String ret_imei = new String(SecureFacade.encodeHex(randomNumberBytes));
        JSONObject json = new JSONObject();
        json.put("data", ret_imei);
        out.print(json.toString());
        out.flush();
    }
    catch (Exception e)
    {
        LOGGER.error("json format error.");
        JSONObject errorJson = new JSONObject();
        errorJson.put("result", "error");
        errorJson.put("data", "unknown");
        out.print(errorJson.toString());
        out.flush();
    }
}
else if(dataenc!=null)
{
    
    try
    {    
        String data = PasswordUtil.decryptAES(dataenc);
        JSONObject json = new JSONObject();
        json.put("data", data);
        out.print(json.toString());
        out.flush();
    }
    catch (Exception e)
    {
        LOGGER.error("json format error.");
        JSONObject errorJson = new JSONObject();
        errorJson.put("result", "error");
        errorJson.put("data", "unknown");
        out.print(errorJson.toString());
        out.flush();
    }
}

else  if(clientSecret !=null)
{
    try
    { 
        String publicKey = "30820122300d06092a864886f70d01010105000382010f003082010a0282010100c3ce97ad13989df961b701740153a7c36b8b362c7b44a640893000af7a50ace238856ae6856f570182648a9f86e7cbd00848ebdc83095bbf02dafe1315bc9f71f4c1f9b9f131f03dbc607383c058989fe31334e48a7fd0fb53037c1db697422c2b99559af6c68b9ef8a72b13c9167ca0a5b83b41b0d00824cbd58d3a93dbd30a1a1ba5899d29b3976cecec9bfda013f8dae3b00ffc87be3413c4565982b21f7ad648b71128690349cb2222a319dfe798bf3441536576a94003a1344b16afb5e800cf471b7e3a942e7197c240dd2801acc89a3908c533044936f07bcab94e8a3498b90c9c5d02e6dad934b5cc6769328d130cd671c9bbd0a4d2bf57abe1cfa8910203010001";
        byte[] publicKeyy  = SecureFacade.decodeHex(publicKey.toCharArray());
        byte[] randomNumberBytes = SecureFacade.decryptByRsaPubKey(publicKeyy, SecureFacade.decodeHex(clientSecret.toCharArray()));
        String decryptCode = new String(new String(randomNumberBytes,"UTF-8"));
        JSONObject json = new JSONObject();
        json.put("data", decryptCode);
        out.print(json.toString());
        out.flush();
    }
    catch (Exception e)
    {
        LOGGER.error("json format error.");
        JSONObject errorJson = new JSONObject();
        errorJson.put("result", "error");
        errorJson.put("data", "unknown");
        out.print(errorJson.toString());
        out.flush();
    }
}
else  if(w3AccountMsg !=null)
{
    try
    { 
        String publicKey = "30303130303004e972d8c469485eff4f8aba1976dba04269ef181d27a47009969bfede31b65c2c86b7b08073750aeb4a3071da5f31c31e60c5e03abd9d4750b78ca2e397a1d2ebb347b548e82c22580a2910638701ef3c0652d9beb225a2ff914d35c99d550e9b8ebe0128fbbc82d01c760c8ed505741379775e918cac439833b1a392156c7fe77a0d196c1ec87ab5468ee5fdfa96bb4d07f2fe138268509463035c5988955161d2e730cce195936d67f29184979dc90562ce212cb5184bb47ff3a71becbffab6ac4589c57080e03a056766378c3640851bfac5d30d5b402672894825b1e0bde1120fb5b410d7ea9c6879b25f216d0d9a0e6ecad55c4a7940c7ffae3207147aee89097fb9d5579e54c778d0a21b2affb94057179c13fd90728d7f61bef1adb9c9a75b655facc8f860a712ffd35be4807d1b461bd979285f52225536ee7fa51f";
        byte[] publicKeyy  = SecureFacade.decodeHex(publicKey.toCharArray());
		byte[]  randomNumberBytes = w3AccountMsg.getBytes("UTF-8");
        randomNumberBytes = SecureFacade.encryptByRsaPubKey(publicKeyy, randomNumberBytes);     
        String ret_w3Account = new String(SecureFacade.encodeHex(randomNumberBytes));
        JSONObject json = new JSONObject();
        json.put("data", ret_w3Account);
        out.print(json.toString());
        out.flush();
    }
    catch (Exception e)
    {
        LOGGER.error("json format error.");
        JSONObject errorJson = new JSONObject();
        errorJson.put("result", "error");
        errorJson.put("data", "unknown");
        out.print(errorJson.toString());
        out.flush();
    }
}
else  if(signature !=null)
{
    try
    { 
        String privateKey = "303031303030f0d250ef4d2e4e7fc664fc4be5875906acf3d07afe608b08da242d49d3175fb3d91c5ec28a4e5f4d3bb186a6c8e219412d14c0f6046337a66bac32cb1acf671ffe24aac1a0178392e7d9fc52fe251886bb385b3eb67ccc4137b8dcc27676c2c1eff3a35a942038e53943ef7a13fd2626346738764e0436688a33a9df190ac977edbb9e83b3c9d8238d0b9a18599a899176d9498a8eb58597a1a08c3aefb27c51c9c6591a041bc0953798850cff1c8f2d5f88b10e49f6c730342b22169f095ecb54adada3e0034bd44b82c0af6ba02c0259e4077b3e8e9c2fd766d682a1e4ffcb7db4d8939528a774be5e0f93fffd91e86d5e3aae845afde4bc5455b179125f2f8812aefd001a2c68d57c8a051de44fac5b16881689296a69223b661ba79b7768a665230d4325443b9c31909e05b2a7c6241ef0dfd261c1f9cdd889880bbbac9aaaf4656b65b1dadfb5a56c8512895fe05c52ddf681d98e55264e72ba62c004144580bb8c5149d228973fe56d44fe7cadbe03b8c32d4e3fcb47d36dfeb9351c92a55efaaa5f9f5cc39d233582d3aacba4860a124e272261d44928a932f1e8e21f609fc71b57da27ab2d479f11c3594ffeb189b7577db1f743126dc8d4c78e82f3dc4e5f0eed0ee02bfa0bd496cf851b2c41e2856dd293c8ecb6ecfde0373f88fa0d2368fb2a1fe44da599496339ef798a7d41cac27af9c323d17522ce27c8692f585abf01e3032fafafb8b98b6ac729602a467743c506f743f471396dca5e7b7a4a22c4f7acade95729d4a07234870478c61f3b5fcb19bef34f686d7cd6441d38083a842e0a35b57470aca691f7004efbcb0812bdbbcae2ea4bc630349b80686c6fcd8b61af76d2c76037953594f1c42bd4aa7acd39f8ca74937cbd0b0e81e80306af3bbba3da3b7ab5831284c10176f8782dcf98f8e8607e583ffb6e334d49b9dc01391bede6e78353508652849c5ad7f57f906147b4c2b77cfc0a549b0536d3b70ac5afdb0812cc3c4d8ebe323dd0689e725342afc8fc150dabde012be79022ce725530d03078dcb4a0098bee6709cf238445392349420deef7fbb7e497c3386babe8664dc674d32a83a4118f4e556fe69904a59a9176df8c548554bdb01020c7cfc0c278e05f6462a64e4e3e2901b3f83c5286a199ed6ed08c743319ad2b17ec0e7d3b8151808bf88cecd6f49ae16059c9a9c59a2c131f6f85c319a6a742ac184f85b0e1cba102e975e1b0daa3031d25aeb91e0fec00f6f9c9405e8d7f1a0d812e537a0b34b350e663f55c2fd7ea49221412c9a1955d9f10a1d2657e71a2fd554f2b266947114b5dba0f14f6ee28d8838015d158f361e1eeedb7df22cd0f4d46bf6146fd2171d9676c3b46a84cba540a4aac379c8ea87a1a38e2c4bf21758c9b141a9fae32feb870915ea1b6ec7fa85b249e3fcfd9923ff1603b2a4874d263f9163db4c7aeca8afb3d85969950e47f68db49b6816147a92f6e7a9e139f319712d4fcf342d0358de7e5deaf9bb479c0e9823b4fbd684160ec5350183f74ed4e4283f6d9593b43dec2284c59f57f3c80febec5f7b58e837218ea578d3602111aa8aab93c3e4710b1e0afa354212ac60540330ad3f3c058415f94091f5ed25769f6c643b6f3c9aada43b10772650e8076fb297950ea750f15bf74177b8e6be363521cf59d3ecee22eadb51410310c8f2145b5447b9141b9bbf08d0967e8bfef02f36f4bc4b1f515218dbf1c3b795c2ec5d406bdfc388a55634c0240a868d2d619";
        byte[] privateKeyy  = SecureFacade.decodeHex(privateKey.toCharArray());
        byte[]  randomNumberBytes = signature.getBytes();
        randomNumberBytes = SecureFacade.encryptByPrivateKey(privateKeyy, randomNumberBytes);     
        String ret_signature = new String(SecureFacade.encodeHex(randomNumberBytes));
        JSONObject json = new JSONObject();
        json.put("data", ret_signature);
        out.print(json.toString());
        out.flush();
    }
    catch (Exception e)
    {
        LOGGER.error("json format error.");
        JSONObject errorJson = new JSONObject();
        errorJson.put("result", "error");
        errorJson.put("data", "unknown");
        out.print(errorJson.toString());
        out.flush();
    }
}
    
else
{
    LOGGER.error("request Pragma is error.");
    JSONObject errorJson = new JSONObject();
    errorJson.put("result", "error");
    errorJson.put("data", "request Pragma is error.");
    out.print(errorJson.toString());
    out.flush();
    }

%>